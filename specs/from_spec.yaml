specify from:
- before:
    expand = function (lua)
      local out, li = macro.substitute (lua, lua)
      return table.concat (out)
    end
- it diagnoses missing 'import' token:
    expect (expand "from foo impart bar").to_error "expected import"
- it does not prevent use of 'from' in other code:
    lua = [[
      local function inject (into, from)
        for k, v in pairs (from) do
          local tfrom, tinto = type (v), type (into[k])
          if tfrom == "table" and (tinto == "table" or tinto == "nil" then
            into[k] = into[k] or {}
            inject (into[k], from[k])
          else
            into[k] = from[k]
          end
        end
        return into
      end
    ]]
    expect (expand (lua)).to_be (lua)
- context with identifier:
  - it imports single symbols:
      expect (expand "from foo import bar").
        to_be "local bar = foo.bar"
  - it imports multiple symbols:
      expect (expand "from foo import bar, baz").
        to_be "local bar, baz = foo.bar, foo.baz"
- context with string:
  - it imports single symbols:
      expect (expand 'from "foo" import bar').
        to_be 'local foo = require "foo"\nlocal bar = foo.bar'
      expect (expand "from 'foo' import bar").
        to_be 'local foo = require "foo"\nlocal bar = foo.bar'
  - it imports multiple symbols:
      expect (expand 'from "foo" import bar, baz').
        to_be 'local foo = require "foo"\nlocal bar, baz = foo.bar, foo.baz'
      expect (expand "from 'foo' import bar, baz").
        to_be 'local foo = require "foo"\nlocal bar, baz = foo.bar, foo.baz'
